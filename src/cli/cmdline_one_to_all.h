/** @file cmdline_one_to_all.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINE_ONE_TO_ALL_H
#define CMDLINE_ONE_TO_ALL_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "Routing"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "Routing"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

enum enum_projection { projection__NULL = -1, projection_arg_none = 0, projection_arg_google_bing, projection_arg_wgs84 };
enum enum_neighbor_finding { neighbor_finding__NULL = -1, neighbor_finding_arg_param = 0, neighbor_finding_arg_trig, neighbor_finding_arg_binary, neighbor_finding_arg_linear };
enum enum_pruning { pruning__NULL = -1, pruning_arg_none = 0, pruning_arg_prune, pruning_arg_pruneMINUS_minMINUS_angle };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * graph_file_arg;	/**< @brief path to graph file (of type .fmi or .graph).  */
  char * graph_file_orig;	/**< @brief path to graph file (of type .fmi or .graph) original value given at command line.  */
  const char *graph_file_help; /**< @brief path to graph file (of type .fmi or .graph) help description.  */
  char * output_directory_arg;	/**< @brief path to output directory (where the subdirectory with the output files should be created) (default='.').  */
  char * output_directory_orig;	/**< @brief path to output directory (where the subdirectory with the output files should be created) original value given at command line.  */
  const char *output_directory_help; /**< @brief path to output directory (where the subdirectory with the output files should be created) help description.  */
  double epsilon_arg;	/**< @brief ε value to use for discretizing the triangulation (if a .graph file is given) (default='0.0').  */
  char * epsilon_orig;	/**< @brief ε value to use for discretizing the triangulation (if a .graph file is given) original value given at command line.  */
  const char *epsilon_help; /**< @brief ε value to use for discretizing the triangulation (if a .graph file is given) help description.  */
  int coords_explicit_flag;	/**< @brief if set, stores the coordinates of steiner points explicitly (default=off).  */
  const char *coords_explicit_help; /**< @brief if set, stores the coordinates of steiner points explicitly help description.  */
  char ** query_arg;	/**< @brief list of source node ids.  */
  char ** query_orig;	/**< @brief list of source node ids original value given at command line.  */
  unsigned int query_min; /**< @brief list of source node ids's minimum occurreces */
  unsigned int query_max; /**< @brief list of source node ids's maximum occurreces */
  const char *query_help; /**< @brief list of source node ids help description.  */
  enum enum_projection projection_arg;	/**< @brief which projection to apply to coordinates when writing to files (default='none').  */
  char * projection_orig;	/**< @brief which projection to apply to coordinates when writing to files original value given at command line.  */
  const char *projection_help; /**< @brief which projection to apply to coordinates when writing to files help description.  */
  int tree_arg;	/**< @brief maximum tree size to export to graph file (default='1000000').  */
  char * tree_orig;	/**< @brief maximum tree size to export to graph file original value given at command line.  */
  const char *tree_help; /**< @brief maximum tree size to export to graph file help description.  */
  int live_status_flag;	/**< @brief print live status about computation to stdout (default=on).  */
  const char *live_status_help; /**< @brief print live status about computation to stdout help description.  */
  enum enum_neighbor_finding neighbor_finding_arg;	/**< @brief the type of algorithm to find neighbors with minimal bending angle.  */
  char * neighbor_finding_orig;	/**< @brief the type of algorithm to find neighbors with minimal bending angle original value given at command line.  */
  const char *neighbor_finding_help; /**< @brief the type of algorithm to find neighbors with minimal bending angle help description.  */
  enum enum_pruning pruning_arg;	/**< @brief which type of pruning to use for steiner graphs.  */
  char * pruning_orig;	/**< @brief which type of pruning to use for steiner graphs original value given at command line.  */
  const char *pruning_help; /**< @brief which type of pruning to use for steiner graphs help description.  */
  int no_tree_flag;	/**< @brief if enabled, only computes distances without keeping tree information (does not produce paths) (default=off).  */
  const char *no_tree_help; /**< @brief if enabled, only computes distances without keeping tree information (does not produce paths) help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int graph_file_given ;	/**< @brief Whether graph-file was given.  */
  unsigned int output_directory_given ;	/**< @brief Whether output-directory was given.  */
  unsigned int epsilon_given ;	/**< @brief Whether epsilon was given.  */
  unsigned int coords_explicit_given ;	/**< @brief Whether coords-explicit was given.  */
  unsigned int query_given ;	/**< @brief Whether query was given.  */
  unsigned int projection_given ;	/**< @brief Whether projection was given.  */
  unsigned int tree_given ;	/**< @brief Whether tree was given.  */
  unsigned int live_status_given ;	/**< @brief Whether live-status was given.  */
  unsigned int neighbor_finding_given ;	/**< @brief Whether neighbor-finding was given.  */
  unsigned int pruning_given ;	/**< @brief Whether pruning was given.  */
  unsigned int no_tree_given ;	/**< @brief Whether no-tree was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_projection_values[];  /**< @brief Possible values for projection. */
extern const char *cmdline_parser_neighbor_finding_values[];  /**< @brief Possible values for neighbor-finding. */
extern const char *cmdline_parser_pruning_values[];  /**< @brief Possible values for pruning. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_ONE_TO_ALL_H */
